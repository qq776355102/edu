<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tedu.dao.qbalance.mapper.QBalanceMapper">
  <resultMap id="BaseResultMap" type="com.tedu.domain.qbalance.QBalance">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="total_balance" jdbcType="VARCHAR" property="totalBalance" />
    <result column="freeze_balance" jdbcType="VARCHAR" property="freezeBalance" />
    <result column="coin_type" jdbcType="VARCHAR" property="coinType" />
    <result column="contract_id" jdbcType="VARCHAR" property="contractId" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, address, total_balance, freeze_balance, coin_type, contract_id
  </sql>
<!--   <select id="selectByUserIdAndAddress" parameterType="java.util.Map" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tedu_balance
    where user_id = #{userId} and address = #{address} and coin_type = #{coinType}
  </select> -->
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tedu_balance
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.tedu.domain.qbalance.QBalance">
    insert into tedu_balance (id, user_id, address, 
      total_balance, freeze_balance, coin_type, 
      contract_id)
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{address,jdbcType=VARCHAR}, 
      #{totalBalance,jdbcType=VARCHAR}, #{freezeBalance,jdbcType=VARCHAR}, #{coinType,jdbcType=VARCHAR}, 
      #{contractId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.tedu.domain.qbalance.QBalance">
    insert into tedu_balance
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="totalBalance != null">
        total_balance,
      </if>
      <if test="freezeBalance != null">
        freeze_balance,
      </if>
      <if test="coinType != null">
        coin_type,
      </if>
      <if test="contractId != null">
        contract_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="totalBalance != null">
        #{totalBalance,jdbcType=VARCHAR},
      </if>
      <if test="freezeBalance != null">
        #{freezeBalance,jdbcType=VARCHAR},
      </if>
      <if test="coinType != null">
        #{coinType,jdbcType=VARCHAR},
      </if>
      <if test="contractId != null">
        #{contractId,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByAddressAndCoinTypeSelective" parameterType="com.tedu.domain.qbalance.QBalance">
    update tedu_balance
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="totalBalance != null">
        total_balance = #{totalBalance,jdbcType=VARCHAR},
      </if>
      <if test="freezeBalance != null">
        freeze_balance = #{freezeBalance,jdbcType=VARCHAR},
      </if>
      <if test="contractId != null">
        contract_id = #{contractId,jdbcType=VARCHAR},
      </if>
    </set>
    where address = #{address} and coin_type = #{coinType,jdbcType=VARCHAR}
      
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tedu.domain.qbalance.QBalance">
    update tedu_balance
    set user_id = #{userId,jdbcType=INTEGER},
      address = #{address,jdbcType=VARCHAR},
      total_balance = #{totalBalance,jdbcType=VARCHAR},
      freeze_balance = #{freezeBalance,jdbcType=VARCHAR},
      coin_type = #{coinType,jdbcType=VARCHAR},
      contract_id = #{contractId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>